{"version":3,"sources":["webpack:///./node_modules/@magento/peregrine/lib/talons/CheckoutPage/PaymentInformation/editModal.gql.js","webpack:///./node_modules/@magento/peregrine/lib/talons/CheckoutPage/PaymentInformation/useEditModal.js","webpack:///./node_modules/@magento/venia-ui/lib/components/CheckoutPage/PaymentInformation/editCard.module.css?82e3","webpack:///./node_modules/@magento/venia-ui/lib/components/CheckoutPage/PaymentInformation/editCard.js","webpack:///./node_modules/@magento/venia-sample-payments-checkmo/src/components/edit.module.css?b3de","webpack:///./node_modules/@magento/venia-sample-payments-checkmo/src/components/edit.js","webpack:///./node_modules/@magento/venia-ui/lib/components/CheckoutPage/PaymentInformation/editablePaymentCollection.js","webpack:///./node_modules/@magento/venia-ui/lib/components/CheckoutPage/PaymentInformation/editModal.js","webpack:///./node_modules/@magento/venia-sample-payments-checkmo/src/components/edit.module.css","webpack:///./node_modules/@magento/venia-ui/lib/components/CheckoutPage/PaymentInformation/editCard.module.css"],"names":["GET_SELECTED_PAYMENT_METHOD","gql","getSelectedPaymentMethodQuery","useEditModal","props","onClose","operations","mergeOperations","DEFAULT_OPERATIONS","isLoading","setIsLoading","useState","updateButtonClicked","setUpdateButtonClicked","cartId","useCartContext","dispatch","useEventingContext","data","selectedPaymentMethodData","useQuery","skip","variables","selectedPaymentMethod","cart","selected_payment_method","code","handleClose","useCallback","handleUpdate","handlePaymentSuccess","type","payload","cart_id","handlePaymentError","handlePaymentReady","resetUpdateButtonClicked","EditCard","classes","useStyle","defaultClasses","onPaymentReady","onPaymentSuccess","onPaymentError","resetShouldSubmit","shouldSubmit","React","createElement","className","root","CreditCard","propTypes","shape","string","func","isRequired","bool","EditCheckMo","CheckMo","braintree","checkmo","EditModal","isOpen","formatMessage","useIntl","talonProps","paymentMethodComponent","useMemo","isEditable","Object","keys","editablePayments","includes","PaymentMethodComponent","FormattedMessage","id","defaultMessage","values","Dialog","confirmText","confirmTranslationId","onCancel","onConfirm","shouldDisableAllButtons","shouldDisableConfirmButton","title"],"mappings":"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","file":"5.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const GET_SELECTED_PAYMENT_METHOD = gql`\n    query getSelectedPaymentMethod($cartId: String!) {\n        cart(cart_id: $cartId) {\n            id\n            selected_payment_method {\n                code\n            }\n        }\n    }\n`;\n\nexport default {\n    getSelectedPaymentMethodQuery: GET_SELECTED_PAYMENT_METHOD\n};\n","import { useState, useCallback } from 'react';\nimport { useQuery } from '@apollo/client';\nimport DEFAULT_OPERATIONS from './editModal.gql';\nimport mergeOperations from '@magento/peregrine/lib/util/shallowMerge';\nimport { useEventingContext } from '../../../context/eventing';\n\nimport { useCartContext } from '../../../context/cart';\n\n/**\n * Talon to handle checkout page's payment information edit modal.\n *\n * @param {Function} props.onClose callback to be called when the modal's close or cancel button is clicked.\n * @param {DocumentNode} props.operations.getSelectedPaymentMethodQuery query to fetch the payment method that was used in the payment information checkout step\n *\n * @returns {\n *   selectedPaymentMethod: String,\n *   isLoading: Boolean,\n *   updateButtonClicked: Boolean,\n *   handleClose: Function,\n *   handleUpdate: Function,\n *   handlePaymentError: Function,\n *   handlePaymentReady: Function,\n *   handlePaymentSuccess: Function,\n *   resetUpdateButtonClicked: Function\n * }\n */\nexport const useEditModal = props => {\n    const { onClose } = props;\n\n    const operations = mergeOperations(DEFAULT_OPERATIONS, props.operations);\n    const { getSelectedPaymentMethodQuery } = operations;\n    /**\n     * Definitions\n     */\n\n    const [isLoading, setIsLoading] = useState(true);\n    const [updateButtonClicked, setUpdateButtonClicked] = useState(false);\n    const [{ cartId }] = useCartContext();\n    const [, { dispatch }] = useEventingContext();\n\n    /**\n     * Queries\n     */\n\n    const { data: selectedPaymentMethodData } = useQuery(\n        getSelectedPaymentMethodQuery,\n        {\n            skip: !cartId,\n            variables: {\n                cartId\n            }\n        }\n    );\n    const selectedPaymentMethod = selectedPaymentMethodData\n        ? selectedPaymentMethodData.cart.selected_payment_method.code\n        : null;\n\n    /**\n     * Helper Functions\n     */\n\n    const handleClose = useCallback(() => {\n        onClose();\n    }, [onClose]);\n\n    const handleUpdate = useCallback(() => {\n        setUpdateButtonClicked(true);\n    }, [setUpdateButtonClicked]);\n\n    const handlePaymentSuccess = useCallback(() => {\n        onClose();\n        dispatch({\n            type: 'CHECKOUT_BILLING_INFORMATION_UPDATED',\n            payload: {\n                cart_id: cartId,\n                selected_payment_method: selectedPaymentMethod\n            }\n        });\n    }, [onClose, dispatch, cartId, selectedPaymentMethod]);\n\n    const handlePaymentError = useCallback(() => {\n        setUpdateButtonClicked(false);\n    }, []);\n\n    const handlePaymentReady = useCallback(() => {\n        setIsLoading(false);\n    }, [setIsLoading]);\n\n    const resetUpdateButtonClicked = useCallback(() => {\n        setUpdateButtonClicked(false);\n    }, [setUpdateButtonClicked]);\n\n    return {\n        selectedPaymentMethod,\n        isLoading,\n        updateButtonClicked,\n        handleClose,\n        handleUpdate,\n        handlePaymentError,\n        handlePaymentReady,\n        handlePaymentSuccess,\n        resetUpdateButtonClicked\n    };\n};\n","import api from \"!../../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../../css-loader/dist/cjs.js??ref--6-oneOf-0-1!../../../../../../postcss-loader/dist/cjs.js!./editCard.module.css\";\n\nvar options = {\"injectType\":\"styleTag\"};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import React from 'react';\nimport { shape, string, bool, func } from 'prop-types';\nimport defaultClasses from './editCard.module.css';\nimport { useStyle } from '../../../classify';\nimport CreditCard from './creditCard';\n\n/**\n * The edit view for the Braintree payment method.\n */\nconst EditCard = props => {\n    const classes = useStyle(defaultClasses, props.classes);\n    const {\n        onPaymentReady,\n        onPaymentSuccess,\n        onPaymentError,\n        resetShouldSubmit,\n        shouldSubmit\n    } = props;\n\n    return (\n        <div className={classes.root} data-cy=\"EditCard\">\n            <CreditCard\n                onPaymentReady={onPaymentReady}\n                onPaymentSuccess={onPaymentSuccess}\n                onPaymentError={onPaymentError}\n                resetShouldSubmit={resetShouldSubmit}\n                shouldSubmit={shouldSubmit}\n            />\n        </div>\n    );\n};\n\nEditCard.propTypes = {\n    classes: shape({\n        root: string\n    }),\n    onPaymentReady: func.isRequired,\n    onPaymentSuccess: func.isRequired,\n    onPaymentError: func.isRequired,\n    resetShouldSubmit: func.isRequired,\n    shouldSubmit: bool\n};\n\nexport default EditCard;\n","import api from \"!../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../css-loader/dist/cjs.js??ref--6-oneOf-0-1!../../../../postcss-loader/dist/cjs.js!./edit.module.css\";\n\nvar options = {\"injectType\":\"styleTag\"};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import React from 'react';\nimport { shape, string, bool, func } from 'prop-types';\n\nimport { useStyle } from '@magento/venia-ui/lib/classify';\n\nimport CheckMo from './checkmo';\nimport defaultClasses from './edit.module.css';\n\n/**\n * The edit view for the Checkmo payment method.\n */\nconst EditCheckMo = props => {\n    const {\n        onPaymentReady,\n        onPaymentSuccess,\n        onPaymentError,\n        resetShouldSubmit,\n        shouldSubmit\n    } = props;\n\n    const classes = useStyle(defaultClasses, props.classes);\n\n    return (\n        <div className={classes.root}>\n            <CheckMo\n                onPaymentReady={onPaymentReady}\n                onPaymentSuccess={onPaymentSuccess}\n                onPaymentError={onPaymentError}\n                resetShouldSubmit={resetShouldSubmit}\n                shouldSubmit={shouldSubmit}\n            />\n        </div>\n    );\n};\n\nexport default EditCheckMo;\n\nEditCheckMo.propTypes = {\n    classes: shape({\n        root: string\n    }),\n    onPaymentReady: func.isRequired,\n    onPaymentSuccess: func.isRequired,\n    onPaymentError: func.isRequired,\n    resetShouldSubmit: func.isRequired,\n    shouldSubmit: bool\n};\n","import braintree from '@magento/venia-ui/lib/components/CheckoutPage/PaymentInformation/editCard';\nimport checkmo from '@magento/venia-sample-payments-checkmo/src/components/edit.js';\n/**\n * This file is augmented at build time using the @magento/venia-ui build\n * target \"checkoutPagePaymentTypes\", which allows third-party modules to\n * add new payment component mappings for the checkout page.\n *\n * @see [Payment definition object]{@link PaymentDefinition}\n */\n\n\n/**\n * A payment definition object that describes a payment in your storefront.\n *\n * @typedef {Object} PaymentDefinition\n * @property {string} paymentCode is use to map your payment\n * @property {string} importPath Resolvable path to the component the\n *   Route component will render\n *\n * @example <caption>A custom payment method</caption>\n * const myCustomPayment = {\n *      paymentCode: 'cc',\n *      importPath: '@partner/module/path_to_your_component'\n * }\n */\n// generated by export-esm-collection-loader\n\nexport default {\n  braintree,\n  checkmo\n};","import React, { useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { bool, func } from 'prop-types';\n\nimport { useEditModal } from '@magento/peregrine/lib/talons/CheckoutPage/PaymentInformation/useEditModal';\nimport Dialog from '../../Dialog';\nimport editablePayments from './editablePaymentCollection';\n\nconst EditModal = props => {\n    const { onClose, isOpen } = props;\n    const { formatMessage } = useIntl();\n\n    const talonProps = useEditModal({ onClose });\n\n    const {\n        selectedPaymentMethod,\n        handleUpdate,\n        handleClose,\n        handlePaymentSuccess,\n        handlePaymentReady,\n        updateButtonClicked,\n        resetUpdateButtonClicked,\n        handlePaymentError\n    } = talonProps;\n\n    const paymentMethodComponent = useMemo(() => {\n        const isEditable = Object.keys(editablePayments).includes(\n            selectedPaymentMethod\n        );\n        if (isEditable) {\n            const PaymentMethodComponent =\n                editablePayments[selectedPaymentMethod];\n            return (\n                <PaymentMethodComponent\n                    onPaymentReady={handlePaymentReady}\n                    onPaymentSuccess={handlePaymentSuccess}\n                    onPaymentError={handlePaymentError}\n                    resetShouldSubmit={resetUpdateButtonClicked}\n                    shouldSubmit={updateButtonClicked}\n                />\n            );\n        } else {\n            return (\n                <div>\n                    <FormattedMessage\n                        id={'checkoutPage.paymentMethodStatus'}\n                        defaultMessage={\n                            '{selectedPaymentMethod} is not supported for editing.'\n                        }\n                        values={{ selectedPaymentMethod }}\n                    />\n                </div>\n            );\n        }\n    }, [\n        handlePaymentError,\n        handlePaymentReady,\n        handlePaymentSuccess,\n        resetUpdateButtonClicked,\n        selectedPaymentMethod,\n        updateButtonClicked\n    ]);\n\n    return (\n        <Dialog\n            confirmText={'Update'}\n            confirmTranslationId={'global.updateButton'}\n            isOpen={isOpen}\n            onCancel={handleClose}\n            onConfirm={handleUpdate}\n            shouldDisableAllButtons={updateButtonClicked}\n            shouldDisableConfirmButton={updateButtonClicked}\n            title={formatMessage({\n                id: 'checkoutPage.editPaymentInformation',\n                defaultMessage: 'Edit Payment Information'\n            })}\n        >\n            {paymentMethodComponent}\n        </Dialog>\n    );\n};\n\nexport default EditModal;\n\nEditModal.propTypes = {\n    onClose: func.isRequired,\n    isOpen: bool\n};\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".edit-root-4P3 {\\n    overflow: auto;\\n    padding: 0.5rem 1rem;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@magento/venia-sample-payments-checkmo/src/components/edit.module.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,cAAc;IACd,oBAAoB;AACxB\",\"sourcesContent\":[\".root {\\n    overflow: auto;\\n    padding: 0.5rem 1rem;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"root\": \"edit-root-4P3\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".editCard-root-iuk {\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@magento/venia-ui/lib/components/CheckoutPage/PaymentInformation/editCard.module.css\"],\"names\":[],\"mappings\":\"AAAA;AAIA\",\"sourcesContent\":[\".root {\\n    composes: overflow-auto from global;\\n    composes: px-xs from global;\\n    composes: py-2xs from global;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\n___CSS_LOADER_EXPORT___.locals = {\n\t\"root\": \"editCard-root-iuk overflow-auto px-xs py-2xs\"\n};\nexport default ___CSS_LOADER_EXPORT___;\n"],"sourceRoot":""}